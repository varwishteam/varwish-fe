{"version":3,"sources":["themeConfig.js","pages/Login.js","pages/Home.js","components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","indigo","secondary","deepOrange","typography","useNextVariants","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","rememberMe","react_default","a","createElement","className","Button_default","component","Link","to","style","position","top","left","ChevronLeft_default","Paper_default","Avatar_default","LockOutlined_default","Typography_default","variant","index_es","id","label","type","name","autoComplete","margin","FormControlLabel_default","control","Checkbox_default","value","color","fullWidth","Component","Home","Fragment","flexGrow","Routes","react_router","exact","path","App","styles","CssBaseline_default","react_router_dom","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c59f113.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core';\nimport indigo from '@material-ui/core/colors/indigo';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n    secondary: deepOrange\n  },\n  typography: {\n    useNextVariants: true\n  }\n});\n\nexport default theme;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { TextField } from '@material-ui/core';\n\nimport './Login.scss';\n\n/**\n * Login page\n */\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      rememberMe: false\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"login-container\">\n        <Button\n          component={Link}\n          to=\"/\"\n          style={{ position: 'fixed', top: '1em', left: '1em' }}\n        >\n          <ChevronLeft />\n          Back\n        </Button>\n        <Paper className=\"login-box\">\n          <Avatar className=\"login-box__avatar\">\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\" className=\"login-box__title\">\n            Log in to VarWish\n          </Typography>\n          <form className=\"login-form\">\n            <TextField\n              id=\"login-form__email\"\n              className=\"login-form__email\"\n              label=\"Email\"\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"email\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n\n            <TextField\n              id=\"login-form__password\"\n              className=\"login-form__password\"\n              label=\"Password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n            <FormControlLabel\n              className=\"login-form__remember-me\"\n              control={<Checkbox value=\"remember\" color=\"primary\" />}\n              label=\"Remember me\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className=\"login-form__log-in\"\n            >\n              Log in\n            </Button>\n          </form>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { AppBar, Typography, Button, Toolbar } from '@material-ui/core';\n\n/**\n * Home page\n */\nexport default class Home extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" style={{ flexGrow: 1 }}>\n              VarWish\n            </Typography>\n            <Button component={Link} to=\"/login\" color=\"inherit\">\n              Login\n            </Button>\n          </Toolbar>\n        </AppBar>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Login from '../pages/Login';\nimport Home from '../pages/Home';\n\nexport default function Routes() {\n  return (\n    <React.Fragment>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n    </React.Fragment>\n  );\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n\nimport theme from './themeConfig';\nimport Routes from './components/Routes';\n\n/**\n * The base of the app, contains all first level routes\n */\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Router>\n          <Routes />\n        </Router>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}